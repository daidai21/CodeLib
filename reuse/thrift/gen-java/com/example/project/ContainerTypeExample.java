/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.project;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2022-4-12")
public class ContainerTypeExample implements org.apache.thrift.TBase<ContainerTypeExample, ContainerTypeExample._Fields>, java.io.Serializable, Cloneable, Comparable<ContainerTypeExample> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContainerTypeExample");

  private static final org.apache.thrift.protocol.TField LIST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("list_type", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("set_type", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField MAP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("map_type", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContainerTypeExampleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContainerTypeExampleTupleSchemeFactory());
  }

  public List<Long> list_type; // optional
  public Set<String> set_type; // optional
  public Map<String,Boolean> map_type; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LIST_TYPE((short)1, "list_type"),
    SET_TYPE((short)2, "set_type"),
    MAP_TYPE((short)3, "map_type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LIST_TYPE
          return LIST_TYPE;
        case 2: // SET_TYPE
          return SET_TYPE;
        case 3: // MAP_TYPE
          return MAP_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LIST_TYPE,_Fields.SET_TYPE,_Fields.MAP_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LIST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("list_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.SET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("set_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("map_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContainerTypeExample.class, metaDataMap);
  }

  public ContainerTypeExample() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContainerTypeExample(ContainerTypeExample other) {
    if (other.isSetList_type()) {
      List<Long> __this__list_type = new ArrayList<Long>(other.list_type);
      this.list_type = __this__list_type;
    }
    if (other.isSetSet_type()) {
      Set<String> __this__set_type = new HashSet<String>(other.set_type);
      this.set_type = __this__set_type;
    }
    if (other.isSetMap_type()) {
      Map<String,Boolean> __this__map_type = new HashMap<String,Boolean>(other.map_type);
      this.map_type = __this__map_type;
    }
  }

  public ContainerTypeExample deepCopy() {
    return new ContainerTypeExample(this);
  }

  @Override
  public void clear() {
    this.list_type = null;
    this.set_type = null;
    this.map_type = null;
  }

  public int getList_typeSize() {
    return (this.list_type == null) ? 0 : this.list_type.size();
  }

  public java.util.Iterator<Long> getList_typeIterator() {
    return (this.list_type == null) ? null : this.list_type.iterator();
  }

  public void addToList_type(long elem) {
    if (this.list_type == null) {
      this.list_type = new ArrayList<Long>();
    }
    this.list_type.add(elem);
  }

  public List<Long> getList_type() {
    return this.list_type;
  }

  public ContainerTypeExample setList_type(List<Long> list_type) {
    this.list_type = list_type;
    return this;
  }

  public void unsetList_type() {
    this.list_type = null;
  }

  /** Returns true if field list_type is set (has been assigned a value) and false otherwise */
  public boolean isSetList_type() {
    return this.list_type != null;
  }

  public void setList_typeIsSet(boolean value) {
    if (!value) {
      this.list_type = null;
    }
  }

  public int getSet_typeSize() {
    return (this.set_type == null) ? 0 : this.set_type.size();
  }

  public java.util.Iterator<String> getSet_typeIterator() {
    return (this.set_type == null) ? null : this.set_type.iterator();
  }

  public void addToSet_type(String elem) {
    if (this.set_type == null) {
      this.set_type = new HashSet<String>();
    }
    this.set_type.add(elem);
  }

  public Set<String> getSet_type() {
    return this.set_type;
  }

  public ContainerTypeExample setSet_type(Set<String> set_type) {
    this.set_type = set_type;
    return this;
  }

  public void unsetSet_type() {
    this.set_type = null;
  }

  /** Returns true if field set_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSet_type() {
    return this.set_type != null;
  }

  public void setSet_typeIsSet(boolean value) {
    if (!value) {
      this.set_type = null;
    }
  }

  public int getMap_typeSize() {
    return (this.map_type == null) ? 0 : this.map_type.size();
  }

  public void putToMap_type(String key, boolean val) {
    if (this.map_type == null) {
      this.map_type = new HashMap<String,Boolean>();
    }
    this.map_type.put(key, val);
  }

  public Map<String,Boolean> getMap_type() {
    return this.map_type;
  }

  public ContainerTypeExample setMap_type(Map<String,Boolean> map_type) {
    this.map_type = map_type;
    return this;
  }

  public void unsetMap_type() {
    this.map_type = null;
  }

  /** Returns true if field map_type is set (has been assigned a value) and false otherwise */
  public boolean isSetMap_type() {
    return this.map_type != null;
  }

  public void setMap_typeIsSet(boolean value) {
    if (!value) {
      this.map_type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LIST_TYPE:
      if (value == null) {
        unsetList_type();
      } else {
        setList_type((List<Long>)value);
      }
      break;

    case SET_TYPE:
      if (value == null) {
        unsetSet_type();
      } else {
        setSet_type((Set<String>)value);
      }
      break;

    case MAP_TYPE:
      if (value == null) {
        unsetMap_type();
      } else {
        setMap_type((Map<String,Boolean>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LIST_TYPE:
      return getList_type();

    case SET_TYPE:
      return getSet_type();

    case MAP_TYPE:
      return getMap_type();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LIST_TYPE:
      return isSetList_type();
    case SET_TYPE:
      return isSetSet_type();
    case MAP_TYPE:
      return isSetMap_type();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContainerTypeExample)
      return this.equals((ContainerTypeExample)that);
    return false;
  }

  public boolean equals(ContainerTypeExample that) {
    if (that == null)
      return false;

    boolean this_present_list_type = true && this.isSetList_type();
    boolean that_present_list_type = true && that.isSetList_type();
    if (this_present_list_type || that_present_list_type) {
      if (!(this_present_list_type && that_present_list_type))
        return false;
      if (!this.list_type.equals(that.list_type))
        return false;
    }

    boolean this_present_set_type = true && this.isSetSet_type();
    boolean that_present_set_type = true && that.isSetSet_type();
    if (this_present_set_type || that_present_set_type) {
      if (!(this_present_set_type && that_present_set_type))
        return false;
      if (!this.set_type.equals(that.set_type))
        return false;
    }

    boolean this_present_map_type = true && this.isSetMap_type();
    boolean that_present_map_type = true && that.isSetMap_type();
    if (this_present_map_type || that_present_map_type) {
      if (!(this_present_map_type && that_present_map_type))
        return false;
      if (!this.map_type.equals(that.map_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_list_type = true && (isSetList_type());
    list.add(present_list_type);
    if (present_list_type)
      list.add(list_type);

    boolean present_set_type = true && (isSetSet_type());
    list.add(present_set_type);
    if (present_set_type)
      list.add(set_type);

    boolean present_map_type = true && (isSetMap_type());
    list.add(present_map_type);
    if (present_map_type)
      list.add(map_type);

    return list.hashCode();
  }

  @Override
  public int compareTo(ContainerTypeExample other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetList_type()).compareTo(other.isSetList_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetList_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_type, other.list_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSet_type()).compareTo(other.isSetSet_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSet_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.set_type, other.set_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMap_type()).compareTo(other.isSetMap_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMap_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.map_type, other.map_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContainerTypeExample(");
    boolean first = true;

    if (isSetList_type()) {
      sb.append("list_type:");
      if (this.list_type == null) {
        sb.append("null");
      } else {
        sb.append(this.list_type);
      }
      first = false;
    }
    if (isSetSet_type()) {
      if (!first) sb.append(", ");
      sb.append("set_type:");
      if (this.set_type == null) {
        sb.append("null");
      } else {
        sb.append(this.set_type);
      }
      first = false;
    }
    if (isSetMap_type()) {
      if (!first) sb.append(", ");
      sb.append("map_type:");
      if (this.map_type == null) {
        sb.append("null");
      } else {
        sb.append(this.map_type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContainerTypeExampleStandardSchemeFactory implements SchemeFactory {
    public ContainerTypeExampleStandardScheme getScheme() {
      return new ContainerTypeExampleStandardScheme();
    }
  }

  private static class ContainerTypeExampleStandardScheme extends StandardScheme<ContainerTypeExample> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContainerTypeExample struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LIST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.list_type = new ArrayList<Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.list_type.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setList_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.set_type = new HashSet<String>(2*_set3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.set_type.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setSet_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.map_type = new HashMap<String,Boolean>(2*_map6.size);
                String _key7;
                boolean _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readString();
                  _val8 = iprot.readBool();
                  struct.map_type.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setMap_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContainerTypeExample struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.list_type != null) {
        if (struct.isSetList_type()) {
          oprot.writeFieldBegin(LIST_TYPE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.list_type.size()));
            for (long _iter10 : struct.list_type)
            {
              oprot.writeI64(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.set_type != null) {
        if (struct.isSetSet_type()) {
          oprot.writeFieldBegin(SET_TYPE_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.set_type.size()));
            for (String _iter11 : struct.set_type)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.map_type != null) {
        if (struct.isSetMap_type()) {
          oprot.writeFieldBegin(MAP_TYPE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, struct.map_type.size()));
            for (Map.Entry<String, Boolean> _iter12 : struct.map_type.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeBool(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContainerTypeExampleTupleSchemeFactory implements SchemeFactory {
    public ContainerTypeExampleTupleScheme getScheme() {
      return new ContainerTypeExampleTupleScheme();
    }
  }

  private static class ContainerTypeExampleTupleScheme extends TupleScheme<ContainerTypeExample> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContainerTypeExample struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetList_type()) {
        optionals.set(0);
      }
      if (struct.isSetSet_type()) {
        optionals.set(1);
      }
      if (struct.isSetMap_type()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetList_type()) {
        {
          oprot.writeI32(struct.list_type.size());
          for (long _iter13 : struct.list_type)
          {
            oprot.writeI64(_iter13);
          }
        }
      }
      if (struct.isSetSet_type()) {
        {
          oprot.writeI32(struct.set_type.size());
          for (String _iter14 : struct.set_type)
          {
            oprot.writeString(_iter14);
          }
        }
      }
      if (struct.isSetMap_type()) {
        {
          oprot.writeI32(struct.map_type.size());
          for (Map.Entry<String, Boolean> _iter15 : struct.map_type.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeBool(_iter15.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContainerTypeExample struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.list_type = new ArrayList<Long>(_list16.size);
          long _elem17;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18)
          {
            _elem17 = iprot.readI64();
            struct.list_type.add(_elem17);
          }
        }
        struct.setList_typeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set19 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.set_type = new HashSet<String>(2*_set19.size);
          String _elem20;
          for (int _i21 = 0; _i21 < _set19.size; ++_i21)
          {
            _elem20 = iprot.readString();
            struct.set_type.add(_elem20);
          }
        }
        struct.setSet_typeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.map_type = new HashMap<String,Boolean>(2*_map22.size);
          String _key23;
          boolean _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readString();
            _val24 = iprot.readBool();
            struct.map_type.put(_key23, _val24);
          }
        }
        struct.setMap_typeIsSet(true);
      }
    }
  }

}

